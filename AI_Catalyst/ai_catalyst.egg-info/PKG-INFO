Metadata-Version: 2.4
Name: ai-catalyst
Version: 0.1.0
Summary: Reusable AI components framework for LLM applications
Home-page: https://github.com/ericmedlock/AI_Catalyst
Author: Eric Medlock
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: asyncpg>=0.28.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: openai>=1.0.0
Requires-Dist: regex>=2023.0.0
Requires-Dist: pandas>=2.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# AI_Catalyst Framework

A collection of proven, reusable AI components extracted from production systems for building robust LLM applications.

## Features

- **Three-Tier LLM System** - Local/Network/OpenAI provider support with automatic failover
- **PII Detection & Scrubbing** - LLM-based PII detection with regex fallback
- **Multi-Format File Processing** - JSON, JSONL, CSV, TXT file handling
- **Database Patterns** - Async PostgreSQL connection pooling and utilities
- **Configuration Management** - Database-first config with YAML fallbacks
- **System Monitoring** - Hardware detection and performance tuning

## Installation

```bash
pip install ai-catalyst
```

## Quick Start

```python
from ai_catalyst import LLMProvider, FileProcessor, PIIProcessor

# Three-tier LLM system
llm = LLMProvider()
response = await llm.generate("Analyze this conversation...")

# File processing
processor = FileProcessor()
data = await processor.process_file("conversations.json")

# PII scrubbing
pii = PIIProcessor()
clean_text = await pii.scrub_text("John Smith called 555-1234")
```

## Components

### LLM Providers
- Local LLM endpoints (LM Studio, Ollama)
- Network LLM endpoints
- OpenAI API with automatic failover

### Data Processing
- Multi-format file processors
- PII detection and scrubbing
- Metadata extraction

### Infrastructure
- Async database patterns
- Configuration management
- System monitoring

## Development

```bash
git clone https://github.com/ericmedlock/AI_Catalyst
cd AI_Catalyst
pip install -e .[dev]
pytest
```

## License

MIT License - see LICENSE file for details.
